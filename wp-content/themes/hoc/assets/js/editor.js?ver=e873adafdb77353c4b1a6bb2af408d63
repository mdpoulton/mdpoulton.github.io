
    var Editor, GrayscaleContrastFilter;

    Editor = (function() {
        var INTRO_TEXT, PROFANITIES, userLang;

        INTRO_TEXT = [""];
        PROFANITIES = /fuck|fcking|nigger|nigga|asshole|cocksucker|blowjob|clit|gangbang|wetback|faggot/i;

        function Editor($canvas, $controls) {
            var ref, self, sliderElement, sliderOrientation, sliderDirection;
            this.photoAdded = false;
            this.values = {
                photo: 0,
                contrast: 0.35,
                color: '#232323'
            };
            this.canvas = new fabric.Canvas($canvas.get(0));
            this.canvas.selection = false;
            this.canvas.setBackgroundColor("#2B2B2B");
            this.canvasUpdateFunction = (function(_this) {
                return function() {
                    return _this.canvas.renderAll();
                };
            })(this);
            this.memeText = "";
            this.controls = $controls;
            self = this;
            if (((ref = window.location.search) != null ? ref.indexOf('skip=1') : void 0) > -1) {
                $("#slides").hide();
                this.logActionToAnalytics('restart');
            } else {
                $("#slides").show();
            }
            $controls.find('.download').click((function(_this) {
                return function() {
                    return _this.downloadLocal();
                };
            })(this));
            $controls.find('.restart').click((function(_this) {
                return function() {
                    return _this.reset();
                };
            })(this));
            $controls.find('.donthave').click((function(_this) {
                return function(e) {
                    e.preventDefault();
                    $(".donthave").hide();
                    return _this.setMode('nophoto').done(function() {});
                };
            })(this));
            $controls.find('.share').click((function(_this) {
                return function() {
                    return _this.share();
                };
            })(this));
            $controls.find('.done').click((function(_this) {
                return function() {
                    $(".done").hide();
                    return _this.setMode('done').done(function() {});
                };
            })(this));
            $(".upload").click(function(e) {
                var $input;
                $input = $("input[type=file]");
                if ($('html').is('.ios')) {
                    return $input.click();
                } else {
                    return $input.click();
                }
            });
            $controls.on('change', 'input[type=file]', function() {
                var returnValue = self.setPhoto.call(self, this.files[0]);
                // Clear file selection before returning
                // (otherwise selecting the same file again does not trigger a changed event)
                this.value = null;
                return returnValue;
            });
            $controls.find('form.editor-color-control').change(function() {
                //TODO: Find if there is a better way to do this
                self.setParameter("color", true);
                return self.setValue.call(self, $(this).find(':checked').val());
            });
            this.controlsRadios = $controls.find('.editor-types input[type=radio]').change(function() {
                return self.setParameter.call(self, $(this).val());
            });
            sliderElement = $('.editor-range-control .range')[0];
            if (window.matchMedia("(min-width: 769px)").matches) {
                sliderOrientation = 'vertical';
                sliderDirection = 'rtl';
            } else {
                sliderOrientation = 'horizontal';
                sliderDirection = 'ltr';
            }

            noUiSlider.create(sliderElement, {
                start: 0.1,
                range: {
                    min: 0,
                    max: 1
                },
                connect: 'upper',
                orientation: sliderOrientation,
                direction: sliderDirection
            });
            this.controlsRange = sliderElement.noUiSlider;
            this.controlsRange.on('change', function(values) {
                return self.setValue.call(self, parseFloat(values[0]), 'change');
            });
            this.controlsRange.on('update', function(values) {
                return self.setValue.call(self, parseFloat(values[0]), 'update');
            });
            $controls.find('.plus').on('click', function(values){

            });
            this.initializeTextMode();
            this.setMode('intro');
        }

        Editor.prototype.initializeTextMode = function(deferred) {
            var fontFam, fontSize, grimePattern, logoTop, textTop, maxLen, textOffset;
            if (this.logoText != null) {
                return;
            }
            this.logoFrame = new fabric.Image(document.getElementById('img-logo-frame-gradient'), {
                filters: [new fabric.Image.filters.Multiply({
                    color: "#F3F3F3"
                })],
                selectable: false,
                evented: false
            });
            this.canvas.add(this.logoFrame);
            this.logoFrame.scaleToHeight(this.canvas.height + 1);
            this.logoFrame.center();

            textTop = 780;
            fontSize = 35;
            fontFam = 'Akzidenz Grotesk';

            this.footerText = new fabric.IText("F U 2 0 1 6 . c o m", {
                originX: 'center',
                textAlign: 'center',
                fill: "#232323",
                left: this.canvas.width / 2,
                top: textTop,
                lineHeight: 1,
                fontSize: fontSize,
                fontFamily: fontFam,
                fontWeight: 'bold',
                styles: {
                    0: {
                        4: { fontStyle: 'italic', fontWeight: 'normal'},
                        6: { fontStyle: 'italic', fontWeight: 'normal' },
                        8: { fontStyle: 'italic', fontWeight: 'normal' },
                        10: { fontStyle: 'italic', fontWeight: 'normal' }
                    }
                },
                editable: false,
                hoverCursor: false,
                hasBorders: false,
                hasControls: false,
                hasRotatingPoint: false,
                lockMovementX: true,
                lockMovementY: true,
                lockRotation: true,
                lockScalingX: true,
                lockScalingY: true,
                selectionColor: 'rgba(255,255,255,0.9)',
                caching: false,
                width: 740,
                fixedLineWidth: 740,
                multiline: false,
                capitalize: true,
                maxLength: 10
            });
            this.canvas.add(this.footerText);

            logoTop = 656;

            // Override text settings for Safari 8, since Fabric can't seem to render custom fonts with that version
            var browser = detectBrowser();
            var isSafari8 = false;
            try {
                if(browser.safari) {
                    var vnum = parseInt(browser.version);
                    if(vnum >= 538 && vnum <= 600) {
                        isSafari8 = true;
                    }
                }
            } catch(e) {
                // Ignore, since flag is already set to false
            }

            // Old check, save for backup:
            // if(/(iphone|ipod|ipad).* os 8_/.test(navigator.userAgent.toLowerCase())) {
            if(isSafari8) {
                textOffset = 10;
                fontSize = 80;
                fontFam = 'Arial';
                maxLen = 12;
            } else {
                textOffset = 0;
                fontSize = 100;
                fontFam = 'Akzidenz Grotesk';
                maxLen = 15;
            }

            this.textBackground = new fabric.Rect({
                top: logoTop,
                left: 98,
                //cornerSize: 50,
                width: 652,
                height: 100,
                rx: 30,
                ry: 30,
                fill: '#D1D1D1',
                editable: false,
                hoverCursor: false,
                hasBorders: false,
                hasControls: false,
                selectable: false,
                hasRotatingPoint: false,
                lockMovementX: true,
                lockMovementY: true,
                lockRotation: true,
                lockScalingX: true,
                lockScalingY: true
            }),
            this.canvas.add(this.textBackground);

            this.logoText = new fabric.IText(INTRO_TEXT[0], {
                originX: 'center',
                textAlign: 'center',
                fill: "#B22C2E",
                left: this.canvas.width / 2,
                top: logoTop + textOffset,
                lineHeight: 1,
                fontSize: fontSize,
                fontFamily: fontFam,
                fontStyle: 'italic',
                editable: false,
                cursorWidth: 8,
                cursorColor: '#B22C2E',
                hoverCursor: 'text',
                hasBorders: false,
                hasControls: false,
                hasRotatingPoint: false,
                lockMovementX: true,
                lockMovementY: true,
                lockRotation: true,
                lockScalingX: true,
                lockScalingY: true,
                selectionColor: 'rgba(255,255,255,0.9)',
                caching: false,
                width: 740,
                fixedLineWidth: 740,
                multiline: false,
                capitalize: true,
                cursorHeightPercent: 0.7,
                cursorDeltaX: 13,
                cursorDeltaY: -6,
                maxLength: maxLen
            });
            this.canvas.add(this.logoText);
            this.logoText.on('changed', (function(_this) {
                return function(e) {
                    var newText, tempText;
                    newText = _this.logoText.text;
                    if (newText !== "") {
                        $(".upload").addClass("showanimation");
                        $(".donthave").animate({
                            opacity: 1
                        }, function(e) {});
                    } else {
                        $(".upload").removeClass("showanimation");
                        $(".donthave").animate({
                            opacity: 0
                        });
                    }
                    tempText = newText.replace(/\s+/g, '');
                    if (PROFANITIES.test(tempText)) {
                        return _this.typeTextClear();
                    } else {
                        reactToKeypress(newText.length < _this.memeText.length);
                        return _this.memeText = newText;
                    }
                };
            })(this));
            this.canvas.on('selection:cleared', (function(_this) {
                return function() {
                    return _this.focusTextField();
                };
            })(this));
            this.focusTextField();
            return deferred != null ? deferred.resolve() : void 0;
        };


        //TODO: check this, remove if necessary
        Editor.prototype.initializeNoPhotoMode = function(deferred, animate){
            if (deferred == null) {
                deferred = null;
            }
            if (animate == null) {
                animate = true;
            }
            this.canvas.off('selection:cleared');
            this.logoText.off('editing:exited');
            this.logoText.exitEditing();
            this.canvas.discardActiveObject();

            this.controls.removeClass().addClass('editor-controls').addClass(parameterId);

        }


        Editor.prototype.initializePhotoMode = function(deferred, animate) {
            if (deferred == null) {
                deferred = null;
            }
            if (animate == null) {
                animate = true;
            }
            if (this.logo != null) {
                return;
            }
            this.canvas.off('selection:cleared');
            this.logoText.off('editing:exited');
            this.logoText.exitEditing();
            this.canvas.remove(this.textBackground);
            this.canvas.discardActiveObject();

            return fabric.util.loadImage(this.canvas.toDataURL(), (function(_this) {
                return function(img) {
                    //var duration, opts, toScale, toTop;
                    if(this.mode == "photo") {
                        _this.canvas.remove(_this.logoFrame);

                        _this.logoFrame = new fabric.Image(document.getElementById('img-logo-frame'), {
                            filters: [new fabric.Image.filters.Multiply({
                                color: "#c90203"
                            })],
                            selectable: false,
                            evented: false
                        });
                        _this.canvas.add(_this.logoFrame);
                        _this.logoFrame.scaleToHeight(_this.canvas.height+1);
                        _this.logoFrame.center();
                        _this.logoText.bringToFront();
                        _this.footerText.bringToFront();
                    }
                    return deferred != null ? deferred.resolve() : void 0;
                };
            })(this));
        };

        Editor.prototype.initializeIntroMode = function(deferred) {
            this.typeTextSeries(INTRO_TEXT).always((function(_this) {
                return function() {
                    return _this.setMode('text').done(function() {
                        _this.logoText.setText('');
                        _this.logoText.set({
                            editable: true
                        });
                    });
                };
            })(this));
            return deferred != null ? deferred.resolve() : void 0;
        };

        Editor.prototype.fixOrderingOnLoad = function() {
            this.canvas.discardActiveObject();
            if (this.photo != null) {
                this.canvas.sendToBack(this.photo);
            }
            if (this.logo != null) {
                this.canvas.bringToFront(this.logo);
            }
        };

        Editor.prototype.finalizeForDoneMode = function(deferred) {
            var secondDeferred;
            secondDeferred = $.Deferred();
            secondDeferred.always((function(_this) {
                return function() {
                    var j, len1, obj, ref;
                    _this.canvas.remove(_this.textBackground);
                    _this.canvas.discardActiveObject();
                    ref = [_this.photo, _this.logo, _this.logoText];
                    for (j = 0, len1 = ref.length; j < len1; j++) {
                        obj = ref[j];
                        if (obj != null) {
                            obj.set({
                                selectable: false,
                                evented: false,
                                editable: false
                            });
                        }
                    }
                    _this.canvas.renderAll();
                    return deferred != null ? deferred.resolve() : void 0;
                };
            })(this));
            if (this.mode !== 'photo') {
                this.initializePhotoMode(secondDeferred, false);
            } else {
                secondDeferred.resolve();
            }
            return deferred;
        };

        Editor.prototype.reset = function() {
            // Restore editor to base state

            // Restore background color
            this.canvas.setBackgroundColor("#2B2B2B");

            // Remove any photo
            if (this.photo != null) {
                this.photo.off('selected');
                this.photo.off('moving');
                this.canvas.remove(this.photo);
            }

            // Restore text background
            this.canvas.add(this.textBackground);

            // Clear text
            this.footerText.setColor("#232323");
            this.logoText.setColor("#B22C2E");
            this.logoText.set({
                editable: true
            });
            this.typeTextClear();
            this.focusTextField();

            // Reset logoframe
            this.canvas.remove(this.logoFrame);

            this.logoFrame = new fabric.Image(document.getElementById('img-logo-frame-gradient'), {
                filters: [new fabric.Image.filters.Multiply({
                    color: "#F3F3F3"
                })],
                selectable: false,
                evented: false
            });
            this.canvas.add(this.logoFrame);
            this.logoFrame.scaleToHeight(this.canvas.height+1);
            this.logoFrame.center();

            // Fix ordering
            this.logoFrame.bringToFront();
            this.textBackground.bringToFront();
            this.logoText.bringToFront();
            this.footerText.bringToFront();

            this.canvas.renderAll();

            // Reset css classes
            $('.editor').removeClass().addClass("editor mode-text slide start");
            this.controls.removeClass().addClass('editor-controls');

            // Reset button visibility
            $('.editor .upload').removeClass('showanimation').show().css('opacity', '0');
            $('.editor .donthave').removeAttr('style').css('opacity', '0');
            $('.editor .done').removeAttr('style');

            // Restore events
            this.canvas.on('selection:cleared', (function(_this) {
                return function() {
                    return _this.focusTextField();
                };
            })(this));

            // Reset checkbox states
            $('.editor-color-control input').prop('checked', false);

            // Reset saved links
            this.permalink = null;
            this.downloadlink = null;
        }

        Editor.prototype.setMode = function(newMode) {
            var deferred, oldMode;
            deferred = new $.Deferred();
            oldMode = this.mode;
            if (newMode !== "intro") {
                $("#bottom").show();
                $("#down").show();
                $("#legal").show();
            }
            switch (newMode) {
                case 'nophoto':
                    this.finalizeForDoneMode(deferred);
                    break;
                case 'intro':
                    this.initializeIntroMode(deferred);
                    break;
                case 'photo':
                    this.initializePhotoMode(deferred);
                    break;
                case 'done':
                    this.finalizeForDoneMode(deferred);
                    break;
                default:
                    deferred.resolve();
            }
            window.setTimeout((function() {
                if (newMode === 'intro' || newMode === 'text') {
                    newMode += ' slide slide4';
                }
                return $('.editor').removeClass().addClass("editor mode-" + newMode);
            }), 1000);
            this.mode = newMode;
            return deferred;
        };

        Editor.prototype.focusTextField = function() {
            var ref, ref1;
            if (((ref = this.canvas.getActiveObject()) != null ? ref.type : void 0) === 'i-text' && ((ref1 = this.logoText) != null ? ref1.isEditing : void 0)) {
                return $('textarea').focus();
            } else {
                this.canvas.setActiveObject(this.logoText);
                this.logoText.enterEditing();
                //$('textarea').focus();
            }
        };

        Editor.prototype.typeTextSeries = function(textArray) {
            this.typeTextSeriesDeferred = $.Deferred();
            this.typeTextSeriesArray = textArray;
            this.typeTextSeriesNext(true);
            return this.typeTextSeriesDeferred;
        };

        Editor.prototype.typeTextSeriesNext = function(isFirst) {
            var delay, text;
            if (this.typeTextCanceling) {
                return;
            }
            text = this.typeTextSeriesArray.shift();
            delay = 500;
            if (text != null) {
                return window.setTimeout((function(_this) {
                    return function() {
                        return _this.typeTextImmediate(text).done(_this.typeTextSeriesNext.bind(_this));
                    };
                })(this), delay);
            } else {
                return window.setTimeout(((function(_this) {
                    return function() {
                        return _this.typeTextSeriesDeferred.resolve();
                    };
                })(this)), delay);
            }
        };

        Editor.prototype.typeTextClear = function() {
            if (this.logoText.isEditing) {
                this.logoText.exitEditing();
            }
            this.logoText.setSelectionStart(0);
            this.logoText.setSelectionEnd(0);
            this.logoText.setText('');
            this.logoText._clearCache();
            this.logoText.enterEditing();
            return this.canvasUpdateFunction();
        };

        Editor.prototype.typeTextImmediate = function(text) {
            this.typeTextDeferred = $.Deferred();
            this.logoText.setText(text);
            this.canvas.renderAll();
            return this.typeTextDeferred.resolve();
        };

        Editor.prototype.typeText = function(text) {
            if (!((this.logoText != null) && (this.typeTextDeferred = $.Deferred()))) {
                return;
            }
            this.typeTextClear();
            this.autoTypeChars = text.split('');
            this.typeTextQueueUpdate();
            return this.typeTextDeferred;
        };

        Editor.prototype.typeTextStop = function() {
            var ref, ref1;
            this.typeTextCanceling = true;
            window.clearTimeout(this.interval);
            this.typeTextClear();
            this.canvas.renderAll();
            if ((ref = this.typeTextDeferred) != null) {
                ref.reject();
            }
            return (ref1 = this.typeTextSeriesDeferred) != null ? ref1.reject() : void 0;
        };

        Editor.prototype.typeTextQueueUpdate = function() {
            var delay;
            delay = 10 + Math.random() * 20;
            return this.interval = window.setTimeout(this.typeTextUpdate.bind(this), delay);
        };

        Editor.prototype.typeTextUpdate = function() {
            var char;
            if (this.typeTextCanceling) {
                return;
            }
            char = this.autoTypeChars.shift();
            if (!((char != null) && (this.logoText != null))) {
                return this.typeTextDeferred.resolve();
            }
            this.logoText.insertChar(char);
            return this.typeTextQueueUpdate();
        };

        Editor.prototype.captureImageDeferred = function(type, quality) {
            var deferred, oldColor, onBlobReady;
            if (type == null) {
                type = 'image/jpeg';
            }
            if (quality == null) {
                quality = 0.8;
            }
            oldColor = this.canvas.backgroundColor;
            this.canvas.discardActiveObject();
            this.canvas.renderAll();
            deferred = $.Deferred();
            onBlobReady = (function(_this) {
                return function(blob) {
                    _this.canvas.backgroundColor = oldColor;
                    return deferred.resolve(blob);
                };
            })(this);
            this.canvas.lowerCanvasEl.toBlob(onBlobReady, type, quality);
            return deferred;
        };

        Editor.prototype.logActionToAnalytics = function(label) {
            return typeof ga === "function" ? ga('send', 'event', 'action', label) : void 0;
        };

        Editor.prototype.downloadLocal = function() {
            this.logActionToAnalytics('download');
            $(".editor-image-controls").slideUp();
            return this.captureImageDeferred().done((function(_this) {
                return function(blob) {
                    // All browsers except iOS / Chrome uses FileSaver.js
                    if (!navigator.userAgent.match('CriOS')) {
                        return saveAs(blob, 'FU.jpg');
                    } else {
                        // Specific handling of Chrome on iOS
                        if (_this.downloadlink != null) {
                            window.open(_this.downloadlink);
                            return;
                        } else {
                            loader = _this.getLoader();
                            data = new FormData();
                            data.append('nonce', ajaxMemeVars.download_nonce);
                            data.append('action', 'save_download_image');
                            data.append('file', _this.canvas.toDataURL("image/jpg"));

                            $.ajax({
                                url: ajaxMemeVars.ajax_url,
                                type: 'POST',
                                data: data,
                                contentType: false,
                                processData: false,
                                success: function (data) {
                                    window.console.log(data);
                                    _this.downloadlink = data.url;
                                    if (!$.isEmptyObject(data)) {
                                        if (data.success) {
                                            loader.resolve();
                                            window.open(data.url);
                                        } else {
                                            window.console.error("Error uploading the photo to server!");
                                        }
                                    }
                                },
                                error: function () {
                                    window.console.error("Error uploading the photo to server!")
                                }
                            });
                        }
                    }
                };
            })(this));
        };

        Editor.prototype.share = function() {
            var loader;
            if (this.isSharingBusy) {
                return;
            } else {
                this.isSharingBusy = true;
            }
            $(".editor-image-controls").slideUp();
            this.logActionToAnalytics('share');
            if (this.permalink != null) {
                return this.popupSharing();
            } else {
                loader = this.getLoader();
                return this.captureImageDeferred().done((function(_this) {
                    return function(blob) {
                        var $facebook, $popup, $twitter, memeText, redir, twitterString, url, data;
                        memeText = _this.memeText;
                        data = new FormData();
                        data.append('nonce', ajaxMemeVars.share_nonce);
                        data.append('action', 'save_canvas_image');
                        data.append('file', _this.canvas.toDataURL("image/jpg"));

                        $.ajax({
                            url :  ajaxMemeVars.ajax_url,
                            type: 'POST',
                            data: data,
                            contentType: false,
                            processData: false,
                            success: function(data) {
                                window.console.log(data);
                                if (!$.isEmptyObject(data)) {
                                    if(data.success) {
                                        _this.permalink = data.url;
                                        _this.isSharingBusy = false;
                                        loader.resolve();
                                        $popup = $('#share-popup-src').addClass('ready');
                                        $twitter = $popup.find('a.twitter');
                                        // I stand with Frank Underwood #FU2016 www.FU2016.com
                                        twitterString = encodeURI("I stand with Frank Underwood www.FU2016.com");
                                        url = "https://twitter.com/intent/tweet?text=" + twitterString + "&url=" + (encodeURI(_this.permalink)) + "&hashtags=FU2016";
                                        $twitter.attr({
                                            href: url
                                        });
                                        $twitter.click(function () {
                                            return _this.logActionToAnalytics('share_twitter');
                                        });
                                        $facebook = $popup.find('a.facebook');
                                        redir = window.location.origin + "/close.html";
                                        url = "https://www.facebook.com/dialog/share?app_id=921576747932543&display=popup&href=" + (encodeURI(_this.permalink)) + "&redirect_uri=" + (encodeURI(redir));
                                        $facebook.attr({
                                            href: url
                                        });
                                        $facebook.click(function () {
                                            return _this.logActionToAnalytics('share_facebook');
                                        });
                                        return _this.popupSharing();
                                    }else{
                                        window.console.error("Error uploading the photo to server!");
                                    }
                                }
                            },
                            error: function() {
                                window.console.error("Error uploading the photo to server!")
                            }
                        });
                    };
                })(this));
            }
        };

        Editor.prototype.popupSharing = function() {
            return $.featherlight($('#share-popup-src'), {
                variant: 'featherlight-share',
                afterOpen: function() {
                    return $('.share-popup').find('a').click(function(e) {
                        var $this, h, w;
                        e.preventDefault();
                        $this = $(this);
                        w = $this.data('popwidth');
                        h = $this.data('popheight');
                        return window.open($(this).attr('href'), "share", "width=" + w + ",height=" + h + ",centerscreen=true");
                    });
                },
                afterClose: (function(_this) {
                    return function() {
                        return _this.isSharingBusy = false;
                    };
                })(this)
            });
        };

        Editor.prototype.setPhoto = function(fileDescriptor) {
            var loader, reader;
            if (fileDescriptor == null) {
                return;
            }
            this.logActionToAnalytics('add-photo');
            loader = this.getLoader();
            reader = new FileReader();
            reader.onload = (function(_this) {
                return function(e) {
                    var aspect, dataUrl, img, imgHeader, ref;
                    img = new Image();
                    dataUrl = e.target.result;
                    img.src = dataUrl;
                    aspect = img.width / img.height;
                    if ((img.width === (ref = img.height) && ref === 0)) {
                        loader.reject();
                        console.error("Load fail. restarting.");
                        window.setTimeout(_this.setPhoto.call(_this, fileDescriptor), 1000);
                        return;
                    }
                    try {
                        imgHeader = _this.dataUrlToBinary(dataUrl, 64 * 1024 + 32);
                    } catch (_error) {
                        e = _error;
                        console.error(e);
                    }
                    _this.photoAdded = true;
                    return _this.setMode('photo').done(function() {
                        return _this.downscalePhotoIfNeededDeferred(img).done(function(photo) {
                            if (_this.photo != null) {
                                _this.photo.off('selected');
                                _this.photo.off('moving');
                                _this.canvas.remove(_this.photo);
                            }
                            _this.photo = photo;
                            _this.photo.set({
                                selectable: true,
                                originX: 'center',
                                originY: 'center',
                                centeredScaling: true,
                                hasRotatingPoint: false,
                                lockRotation: true,
                                lockScalingFlip: true,
                                lockUniScaling: true,
                                lockMovementX: false,
                                lockMovementY: false,
                                lockScalingX: true,
                                lockScalingY: true,
                                hasBorders: false,
                                hasControls: false,
                                width: _this.canvas.width,
                                height: _this.canvas.height,
                                padding: 0
                            });
                            if (aspect > 1) {
                                _this.photo.width = _this.canvas.width * aspect;
                            } else {
                                _this.photo.height = _this.canvas.height / aspect;
                            }
                            _this.photo.filters.push(new GrayscaleContrastFilter({
                                contrast: _this.values.contrast
                            }));
                            _this.photo.filters.push(new fabric.Image.filters.Brightness({
                                brightness: 15
                            }));

                            //change the logoFrame opacity. Change color from white (default) to dark grey
                            _this.logoFrame.opacity = 0.1;
                            _this.setParameter("color", true);
                            _this.setValue.call(_this, "#232323");

                            _this.photo.applyFilters(function() {
                                _this.canvas.insertAt(_this.photo, 0);
                                _this.photo.center();
                                _this.photo.on('selected', function() {
                                    return _this.setParameter('photo', true);
                                });
                                _this.photo.on('moving', function() {
                                    return _this.constrainPhotoMove();
                                });
                                _this.setParameter('photo', true);
                                return loader.resolve();
                            });
                            if (imgHeader != null) {
                                return inkjet.exif(imgHeader, function(err, metadata) {
                                    if ((metadata != null ? metadata.Orientation : void 0) != null) {
                                        switch (metadata.Orientation.value) {
                                            case 8:
                                                _this.photo.setAngle(-90);
                                                break;
                                            case 3:
                                                _this.photo.setAngle(-180);
                                                break;
                                            case 6:
                                                _this.photo.setAngle(90);
                                        }
                                        if (_this.photo.angle !== 0) {
                                            return _this.canvas.renderAll();
                                        }
                                    }
                                });
                            }
                        });
                    });
                };
            })(this);
            return reader.readAsDataURL(fileDescriptor);
        };

        Editor.prototype.dataUrlToBinary = function(dataURL, stopAfterBytes) {
            var BASE64_MARKER, base64, binArray, i, j, len, parts, raw, ref, stopAfterChars;
            BASE64_MARKER = ';base64,';
            parts = dataURL.split(BASE64_MARKER);
            base64 = parts[1];
            if (stopAfterBytes > 0) {
                stopAfterChars = Math.ceil((4 * stopAfterBytes / 3) / 4) * 4;
                base64 = base64.substr(0, stopAfterChars);
            }
            raw = window.atob(base64);
            len = raw.length;
            binArray = new Uint8Array(len);
            for (i = j = 0, ref = len; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
                binArray[i] = raw.charCodeAt(i);
            }
            return binArray;
        };

        Editor.prototype.downscalePhotoIfNeededDeferred = function(img) {
            var H, OVERSCALE, W, aspect, ctx, deferred, resizeCanvas;
            deferred = $.Deferred();
            OVERSCALE = 1;
            W = this.canvas.width * OVERSCALE;
            H = this.canvas.height * OVERSCALE;
            aspect = img.width / img.height;
            if (img.width > W && img.height > H) {
                console.warn("Scaling down image");
                resizeCanvas = document.createElement('canvas');
                resizeCanvas.width = W;
                resizeCanvas.height = H;
                if (aspect > 1) {
                    resizeCanvas.width = W * aspect;
                } else {
                    resizeCanvas.heigth = H / aspect;
                }
                ctx = resizeCanvas.getContext('2d');
                ctx.drawImage(img, 0, 0, resizeCanvas.width, resizeCanvas.height);
                fabric.Image.fromURL(resizeCanvas.toDataURL(), (function(_this) {
                    return function(photo) {
                        return deferred.resolve(photo);
                    };
                })(this));
            } else {
                deferred.resolve(new fabric.Image(img));
            }
            return deferred;
        };

        Editor.prototype.setParameter = function(parameterId, programmatic) {
            if (programmatic == null) {
                programmatic = false;
            }
            if (programmatic && this.parameter !== parameterId) {
                $("#control-" + parameterId).click();
            }
            this.controls.removeClass().addClass('editor-controls').addClass(parameterId);
            this.parameter = parameterId;
            if(this.parameter != "color"){
                this.controlsRange.set(this.values[this.parameter]);
            }
            if (!programmatic) {
                if (this.parameter === 'photo' && (this.photo != null)) {
                    return this.canvas.setActiveObject(this.photo);
                } else {
                    return this.canvas.discardActiveObject();
                }
            }
        };

        Editor.prototype.setValue = function(value, eventType) {
            var ref, ref1, ref2, ref3;
            this.values[this.parameter] = value;
            switch (this.parameter) {
                case 'photo':
                    if ((ref = this.photo) != null) {
                        ref.scale(value + 1);
                    }
                    this.constrainPhotoMove();
                    break;
                case 'contrast':
                    if (eventType !== 'update') {
                        if ((ref1 = this.photo) != null) {
                            if ((ref2 = ref1.filters[0]) != null) {
                                ref2.contrast = value;
                            }
                        }
                        if ((ref3 = this.photo) != null) {
                            ref3.applyFilters((function(_this) {
                                return function() {
                                    return _this.canvas.renderAll();
                                };
                            })(this));
                        }
                    }
                    break;
                case 'color':
                    if(this.mode == "nophoto"){
                        switch (value){
                            //grey
                            case "#232323":
                                //value = "#000";
                                this.canvas.remove(this.gradient);
                                this.canvas.setBackgroundColor("#D1D1D1");
                                break;
                            //red
                            case "#ad2122":
                                value = "#b12c36";
                                this.canvas.remove(this.gradient);
                                this.canvas.setBackgroundColor("#2B2B2B");
                                break;
                            //blue
                            case "#002aff":
                                value = "#232323";
                                this.canvas.setBackgroundColor("#0434b1");
                                //remove logoFrame and text
                                this.canvas.remove(this.logoFrame);
                                //add gradient to background
                                this.gradient = new fabric.Image(document.getElementById('img-background-gradient'), {
                                    selectable: false,
                                    evented: false
                                });
                                this.canvas.add(this.gradient);
                                //add logoFrame and text back on
                                this.canvas.add(this.logoFrame);
                                this.logoText.bringToFront();
                                this.footerText.bringToFront();
                                break;
                        }
                    }else{
                        switch (value){
                            //grey
                            case "#232323":
                                value = "#363636";
                                this.logoFrame.opacity = 0.8;
                                break;
                            //red
                            case "#ad2122":
                                value = "#9d0109";
                                this.logoFrame.opacity = 0.7;
                                break;
                            //blue
                            case "#002aff":
                                value = "#043699";
                                this.logoFrame.opacity = 0.7;
                                //value = "#232323";

                                break;
                        }
                    }

                    this.footerText.setColor("#FFF");
                    this.logoText.setColor("#FFF");
                    this.logoFrame.filters = [new fabric.Image.filters.Multiply({
                        color: value
                    })];

                    this.logoFrame.applyFilters((function(_this) {
                        return function(){
                            return _this.canvas.renderAll();
                        }
                    })(this));


            }
            return this.canvas.renderAll();
        };

        Editor.prototype.constrainPhotoMove = function() {
            var p;
            this.photo.setCoords();
            p = this.photo.getBoundingRect();
            this.photo.setLeft(Math.min(0, Math.max(this.canvas.width - p.width, p.left)) + p.width / 2);
            return this.photo.setTop(Math.min(0, Math.max(this.canvas.height - p.height, p.top)) + p.height / 2);
        };

        Editor.prototype.getLoader = function() {
            var deferred;
            $('#loader').show();
            deferred = $.Deferred();
            deferred.always(function() {
                return $('#loader').hide();
            });
            return deferred;
        };

        return Editor;

    })();

    GrayscaleContrastFilter = fabric.util.createClass(fabric.Image.filters.BaseFilter, {
        type: 'Contrast',
        initialize: function(options) {
            options = options || {};
            return this.contrast = options.contrast || 0;
        },
        applyTo: function(canvasEl) {
            var color, context, contrast, data, i, imageData, j, px, ref;
            context = canvasEl.getContext('2d');
            imageData = context.getImageData(0, 0, canvasEl.width, canvasEl.height);
            contrast = 0.5 + this.contrast * 2;
            data = imageData.data;
            for (px = j = 0, ref = data.length / 4; 0 <= ref ? j <= ref : j >= ref; px = 0 <= ref ? ++j : --j) {
                i = px * 4;
                color = (data[i] + data[i + 1] + data[i + 2]) / 3;
                color = (color - 128) * contrast + 128;
                data[i] = data[i + 1] = data[i + 2] = color;
            }
            return context.putImageData(imageData, 0, 0);
        },
        toObject: function() {
            return extend(this.callSuper('toObject'), {
                contrast: this.contrast
            });
        }
    });

    GrayscaleContrastFilter.fromObject = function(o) {
        return new GrayscaleContrastFilter(o);
    };

    var startTextAnimation = function() {
        var $el1 = $('#fu').find('.text-animation-one'),
            $el2 = $('#fu').find('.text-animation-two');
        $el1.fadeIn();
    }

    var startSlidesAnimation = function() {
        var $el = $('#fu'),
            $slide1 = $el.find('.slide1'),
            $slide2 = $el.find('.slide2'),
            $slide3 = $el.find('.slide3'),
            $slide4 = $el.find('.slide4');


        Editor._instance = new Editor($('#canvas'), $('.editor-controls'));
        $slide1.addClass('start');
        $slide1.on("webkitAnimationEnd oAnimationEnd msAnimationEnd animationend", function(e){
            if (e.originalEvent.elapsedTime > 0.5) {
                $slide1.removeClass('start').addClass('end');
                $slide2.addClass('start');
            }
        });

        $slide2.on("webkitAnimationEnd oAnimationEnd msAnimationEnd animationend", function(e){
            if (e.originalEvent.animationName === "fade-in") {
                $slide2.removeClass('start').addClass('end');
                $slide3.addClass('start');
                
            }
        });

        $slide3.on("webkitAnimationEnd oAnimationEnd msAnimationEnd animationend", function(e){
            if (e.originalEvent.animationName === "fade-in") {
                $slide3.removeClass('start').addClass('end');
                $slide4.addClass('start');
            }
        });

        $slide4.on("webkitAnimationEnd oAnimationEnd msAnimationEnd animationend", function(e){
            if (e.originalEvent.animationName === "fade-in-meme") {
                $slide4.removeClass('slide4');
                if (window.matchMedia("(min-width: 769px)").matches) {
                    Editor._instance.focusTextField();
                }
                inputClickOverride();
            }
        });


    }

    var inputClickOverride = function(){
        // var $el = $('.editor');
        // if ($el.is('.mode-text')){
        //     $el.on('click touch', function(){
        //         Editor._instance.focusTextField();
        //     });
        // }
    };

    var showMemeGenerator = function(){
        $('.editor').css('opacity', '1');
        $.when(Editor._instance = new Editor($('#canvas'), $('.editor-controls'))).then(function(){
            if (window.matchMedia("(min-width: 769px)").matches) {
                setTimeout(function(){
                    Editor._instance.focusTextField();
                }, 1500);
                
            }
        });
        $('.editor').css('opacity', '1');
        $('#fu').find('.text-animation-one').css({
            'opacity': '1',
            'transition' : 'none'

        });
        $('#fu').find('.text-animation-two').css({
            'opacity': '1',
            'transition' : 'none'
        });

        
        
    }

    var thankYouStep = function(){

        var $controls = $('.editor-controls'),
            $share = $controls.find('.share'),
            $download = $controls.find('.download'),
            $text1 = $('.text-animation-one'),
            $text2 = $('.text-animation-two'),
            $ty = $('.text-animation-three'),
            done = false;

            $share.on('click touch', function(){
                init();
            });

            $download.on('click touch', function(){
                init();
            });

        var init = function(){
            if (!done){
                $text1.fadeOut('slow');
                $text2.fadeOut('slow', function(){
                    $ty.fadeIn('slow');
                });
                done = true;
            }
        }


    }

    $(window).load(function() {
    
        //return Editor._instance = new Editor($('#canvas'), $('.editor-controls'));
    });

    $(document).ready(function() {
        thankYouStep();
    });
